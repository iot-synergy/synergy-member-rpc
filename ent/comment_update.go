// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/synergy-member-rpc/ent/comment"
	"github.com/iot-synergy/synergy-member-rpc/ent/predicate"
	"github.com/iot-synergy/synergy-member-rpc/ent/reply"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentUpdate) SetUpdatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetTitle sets the "title" field.
func (cu *CommentUpdate) SetTitle(s string) *CommentUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableTitle(s *string) *CommentUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// ClearTitle clears the value of the "title" field.
func (cu *CommentUpdate) ClearTitle() *CommentUpdate {
	cu.mutation.ClearTitle()
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentUpdate) SetContent(s string) *CommentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableContent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of the "content" field.
func (cu *CommentUpdate) ClearContent() *CommentUpdate {
	cu.mutation.ClearContent()
	return cu
}

// SetMemberId sets the "memberId" field.
func (cu *CommentUpdate) SetMemberId(s string) *CommentUpdate {
	cu.mutation.SetMemberId(s)
	return cu
}

// SetNillableMemberId sets the "memberId" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableMemberId(s *string) *CommentUpdate {
	if s != nil {
		cu.SetMemberId(*s)
	}
	return cu
}

// SetCreateTime sets the "create_time" field.
func (cu *CommentUpdate) SetCreateTime(t time.Time) *CommentUpdate {
	cu.mutation.SetCreateTime(t)
	return cu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableCreateTime(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetCreateTime(*t)
	}
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CommentUpdate) SetUpdateTime(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUpdateTime(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetUpdateTime(*t)
	}
	return cu
}

// SetIsReply sets the "is_reply" field.
func (cu *CommentUpdate) SetIsReply(b bool) *CommentUpdate {
	cu.mutation.SetIsReply(b)
	return cu
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIsReply(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetIsReply(*b)
	}
	return cu
}

// AddReplyIDs adds the "replys" edge to the Reply entity by IDs.
func (cu *CommentUpdate) AddReplyIDs(ids ...uint64) *CommentUpdate {
	cu.mutation.AddReplyIDs(ids...)
	return cu
}

// AddReplys adds the "replys" edges to the Reply entity.
func (cu *CommentUpdate) AddReplys(r ...*Reply) *CommentUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddReplyIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearReplys clears all "replys" edges to the Reply entity.
func (cu *CommentUpdate) ClearReplys() *CommentUpdate {
	cu.mutation.ClearReplys()
	return cu
}

// RemoveReplyIDs removes the "replys" edge to Reply entities by IDs.
func (cu *CommentUpdate) RemoveReplyIDs(ids ...uint64) *CommentUpdate {
	cu.mutation.RemoveReplyIDs(ids...)
	return cu
}

// RemoveReplys removes "replys" edges to Reply entities.
func (cu *CommentUpdate) RemoveReplys(r ...*Reply) *CommentUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveReplyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if v, ok := cu.mutation.MemberId(); ok {
		if err := comment.MemberIdValidator(v); err != nil {
			return &ValidationError{Name: "memberId", err: fmt.Errorf(`ent: validator failed for field "Comment.memberId": %w`, err)}
		}
	}
	return nil
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(comment.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.TitleCleared() {
		_spec.ClearField(comment.FieldTitle, field.TypeString)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cu.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cu.mutation.MemberId(); ok {
		_spec.SetField(comment.FieldMemberId, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreateTime(); ok {
		_spec.SetField(comment.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.IsReply(); ok {
		_spec.SetField(comment.FieldIsReply, field.TypeBool, value)
	}
	if cu.mutation.ReplysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReplysTable,
			Columns: []string{comment.ReplysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedReplysIDs(); len(nodes) > 0 && !cu.mutation.ReplysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReplysTable,
			Columns: []string{comment.ReplysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReplysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReplysTable,
			Columns: []string{comment.ReplysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentUpdateOne) SetUpdatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CommentUpdateOne) SetTitle(s string) *CommentUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableTitle(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// ClearTitle clears the value of the "title" field.
func (cuo *CommentUpdateOne) ClearTitle() *CommentUpdateOne {
	cuo.mutation.ClearTitle()
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentUpdateOne) SetContent(s string) *CommentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableContent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of the "content" field.
func (cuo *CommentUpdateOne) ClearContent() *CommentUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// SetMemberId sets the "memberId" field.
func (cuo *CommentUpdateOne) SetMemberId(s string) *CommentUpdateOne {
	cuo.mutation.SetMemberId(s)
	return cuo
}

// SetNillableMemberId sets the "memberId" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableMemberId(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetMemberId(*s)
	}
	return cuo
}

// SetCreateTime sets the "create_time" field.
func (cuo *CommentUpdateOne) SetCreateTime(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetCreateTime(t)
	return cuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableCreateTime(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetCreateTime(*t)
	}
	return cuo
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CommentUpdateOne) SetUpdateTime(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUpdateTime(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetUpdateTime(*t)
	}
	return cuo
}

// SetIsReply sets the "is_reply" field.
func (cuo *CommentUpdateOne) SetIsReply(b bool) *CommentUpdateOne {
	cuo.mutation.SetIsReply(b)
	return cuo
}

// SetNillableIsReply sets the "is_reply" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIsReply(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetIsReply(*b)
	}
	return cuo
}

// AddReplyIDs adds the "replys" edge to the Reply entity by IDs.
func (cuo *CommentUpdateOne) AddReplyIDs(ids ...uint64) *CommentUpdateOne {
	cuo.mutation.AddReplyIDs(ids...)
	return cuo
}

// AddReplys adds the "replys" edges to the Reply entity.
func (cuo *CommentUpdateOne) AddReplys(r ...*Reply) *CommentUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddReplyIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearReplys clears all "replys" edges to the Reply entity.
func (cuo *CommentUpdateOne) ClearReplys() *CommentUpdateOne {
	cuo.mutation.ClearReplys()
	return cuo
}

// RemoveReplyIDs removes the "replys" edge to Reply entities by IDs.
func (cuo *CommentUpdateOne) RemoveReplyIDs(ids ...uint64) *CommentUpdateOne {
	cuo.mutation.RemoveReplyIDs(ids...)
	return cuo
}

// RemoveReplys removes "replys" edges to Reply entities.
func (cuo *CommentUpdateOne) RemoveReplys(r ...*Reply) *CommentUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveReplyIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := comment.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if v, ok := cuo.mutation.MemberId(); ok {
		if err := comment.MemberIdValidator(v); err != nil {
			return &ValidationError{Name: "memberId", err: fmt.Errorf(`ent: validator failed for field "Comment.memberId": %w`, err)}
		}
	}
	return nil
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(comment.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.TitleCleared() {
		_spec.ClearField(comment.FieldTitle, field.TypeString)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if cuo.mutation.ContentCleared() {
		_spec.ClearField(comment.FieldContent, field.TypeString)
	}
	if value, ok := cuo.mutation.MemberId(); ok {
		_spec.SetField(comment.FieldMemberId, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreateTime(); ok {
		_spec.SetField(comment.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(comment.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.IsReply(); ok {
		_spec.SetField(comment.FieldIsReply, field.TypeBool, value)
	}
	if cuo.mutation.ReplysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReplysTable,
			Columns: []string{comment.ReplysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedReplysIDs(); len(nodes) > 0 && !cuo.mutation.ReplysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReplysTable,
			Columns: []string{comment.ReplysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReplysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ReplysTable,
			Columns: []string{comment.ReplysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
