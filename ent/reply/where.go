// Code generated by ent, DO NOT EDIT.

package reply

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/iot-synergy/synergy-member-rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldUpdatedAt, v))
}

// CommentID applies equality check predicate on the "comment_id" field. It's identical to CommentIDEQ.
func CommentID(v uint64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCommentID, v))
}

// Reply applies equality check predicate on the "reply" field. It's identical to ReplyEQ.
func Reply(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldReply, v))
}

// AdminId applies equality check predicate on the "adminId" field. It's identical to AdminIdEQ.
func AdminId(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAdminId, v))
}

// AdminName applies equality check predicate on the "adminName" field. It's identical to AdminNameEQ.
func AdminName(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAdminName, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldUpdateTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldUpdatedAt, v))
}

// CommentIDEQ applies the EQ predicate on the "comment_id" field.
func CommentIDEQ(v uint64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCommentID, v))
}

// CommentIDNEQ applies the NEQ predicate on the "comment_id" field.
func CommentIDNEQ(v uint64) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldCommentID, v))
}

// CommentIDIn applies the In predicate on the "comment_id" field.
func CommentIDIn(vs ...uint64) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldCommentID, vs...))
}

// CommentIDNotIn applies the NotIn predicate on the "comment_id" field.
func CommentIDNotIn(vs ...uint64) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldCommentID, vs...))
}

// ReplyEQ applies the EQ predicate on the "reply" field.
func ReplyEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldReply, v))
}

// ReplyNEQ applies the NEQ predicate on the "reply" field.
func ReplyNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldReply, v))
}

// ReplyIn applies the In predicate on the "reply" field.
func ReplyIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldReply, vs...))
}

// ReplyNotIn applies the NotIn predicate on the "reply" field.
func ReplyNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldReply, vs...))
}

// ReplyGT applies the GT predicate on the "reply" field.
func ReplyGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldReply, v))
}

// ReplyGTE applies the GTE predicate on the "reply" field.
func ReplyGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldReply, v))
}

// ReplyLT applies the LT predicate on the "reply" field.
func ReplyLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldReply, v))
}

// ReplyLTE applies the LTE predicate on the "reply" field.
func ReplyLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldReply, v))
}

// ReplyContains applies the Contains predicate on the "reply" field.
func ReplyContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldReply, v))
}

// ReplyHasPrefix applies the HasPrefix predicate on the "reply" field.
func ReplyHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldReply, v))
}

// ReplyHasSuffix applies the HasSuffix predicate on the "reply" field.
func ReplyHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldReply, v))
}

// ReplyEqualFold applies the EqualFold predicate on the "reply" field.
func ReplyEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldReply, v))
}

// ReplyContainsFold applies the ContainsFold predicate on the "reply" field.
func ReplyContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldReply, v))
}

// AdminIdEQ applies the EQ predicate on the "adminId" field.
func AdminIdEQ(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAdminId, v))
}

// AdminIdNEQ applies the NEQ predicate on the "adminId" field.
func AdminIdNEQ(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldAdminId, v))
}

// AdminIdIn applies the In predicate on the "adminId" field.
func AdminIdIn(vs ...int64) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldAdminId, vs...))
}

// AdminIdNotIn applies the NotIn predicate on the "adminId" field.
func AdminIdNotIn(vs ...int64) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldAdminId, vs...))
}

// AdminIdGT applies the GT predicate on the "adminId" field.
func AdminIdGT(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldAdminId, v))
}

// AdminIdGTE applies the GTE predicate on the "adminId" field.
func AdminIdGTE(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldAdminId, v))
}

// AdminIdLT applies the LT predicate on the "adminId" field.
func AdminIdLT(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldAdminId, v))
}

// AdminIdLTE applies the LTE predicate on the "adminId" field.
func AdminIdLTE(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldAdminId, v))
}

// AdminNameEQ applies the EQ predicate on the "adminName" field.
func AdminNameEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAdminName, v))
}

// AdminNameNEQ applies the NEQ predicate on the "adminName" field.
func AdminNameNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldAdminName, v))
}

// AdminNameIn applies the In predicate on the "adminName" field.
func AdminNameIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldAdminName, vs...))
}

// AdminNameNotIn applies the NotIn predicate on the "adminName" field.
func AdminNameNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldAdminName, vs...))
}

// AdminNameGT applies the GT predicate on the "adminName" field.
func AdminNameGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldAdminName, v))
}

// AdminNameGTE applies the GTE predicate on the "adminName" field.
func AdminNameGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldAdminName, v))
}

// AdminNameLT applies the LT predicate on the "adminName" field.
func AdminNameLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldAdminName, v))
}

// AdminNameLTE applies the LTE predicate on the "adminName" field.
func AdminNameLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldAdminName, v))
}

// AdminNameContains applies the Contains predicate on the "adminName" field.
func AdminNameContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldAdminName, v))
}

// AdminNameHasPrefix applies the HasPrefix predicate on the "adminName" field.
func AdminNameHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldAdminName, v))
}

// AdminNameHasSuffix applies the HasSuffix predicate on the "adminName" field.
func AdminNameHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldAdminName, v))
}

// AdminNameEqualFold applies the EqualFold predicate on the "adminName" field.
func AdminNameEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldAdminName, v))
}

// AdminNameContainsFold applies the ContainsFold predicate on the "adminName" field.
func AdminNameContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldAdminName, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldUpdateTime, v))
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.Reply {
	return predicate.Reply(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.Comment) predicate.Reply {
	return predicate.Reply(func(s *sql.Selector) {
		step := newCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reply) predicate.Reply {
	return predicate.Reply(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reply) predicate.Reply {
	return predicate.Reply(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reply) predicate.Reply {
	return predicate.Reply(sql.NotPredicates(p))
}
