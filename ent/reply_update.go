// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/synergy-member-rpc/ent/comment"
	"github.com/iot-synergy/synergy-member-rpc/ent/predicate"
	"github.com/iot-synergy/synergy-member-rpc/ent/reply"
)

// ReplyUpdate is the builder for updating Reply entities.
type ReplyUpdate struct {
	config
	hooks    []Hook
	mutation *ReplyMutation
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ru *ReplyUpdate) Where(ps ...predicate.Reply) *ReplyUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReplyUpdate) SetUpdatedAt(t time.Time) *ReplyUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetCommentID sets the "comment_id" field.
func (ru *ReplyUpdate) SetCommentID(u uint64) *ReplyUpdate {
	ru.mutation.SetCommentID(u)
	return ru
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableCommentID(u *uint64) *ReplyUpdate {
	if u != nil {
		ru.SetCommentID(*u)
	}
	return ru
}

// SetReply sets the "reply" field.
func (ru *ReplyUpdate) SetReply(s string) *ReplyUpdate {
	ru.mutation.SetReply(s)
	return ru
}

// SetNillableReply sets the "reply" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableReply(s *string) *ReplyUpdate {
	if s != nil {
		ru.SetReply(*s)
	}
	return ru
}

// SetAdminId sets the "adminId" field.
func (ru *ReplyUpdate) SetAdminId(s string) *ReplyUpdate {
	ru.mutation.SetAdminId(s)
	return ru
}

// SetNillableAdminId sets the "adminId" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableAdminId(s *string) *ReplyUpdate {
	if s != nil {
		ru.SetAdminId(*s)
	}
	return ru
}

// SetAdminName sets the "adminName" field.
func (ru *ReplyUpdate) SetAdminName(s string) *ReplyUpdate {
	ru.mutation.SetAdminName(s)
	return ru
}

// SetNillableAdminName sets the "adminName" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableAdminName(s *string) *ReplyUpdate {
	if s != nil {
		ru.SetAdminName(*s)
	}
	return ru
}

// SetCreateTime sets the "create_time" field.
func (ru *ReplyUpdate) SetCreateTime(t time.Time) *ReplyUpdate {
	ru.mutation.SetCreateTime(t)
	return ru
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableCreateTime(t *time.Time) *ReplyUpdate {
	if t != nil {
		ru.SetCreateTime(*t)
	}
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *ReplyUpdate) SetUpdateTime(t time.Time) *ReplyUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableUpdateTime(t *time.Time) *ReplyUpdate {
	if t != nil {
		ru.SetUpdateTime(*t)
	}
	return ru
}

// SetComment sets the "comment" edge to the Comment entity.
func (ru *ReplyUpdate) SetComment(c *Comment) *ReplyUpdate {
	return ru.SetCommentID(c.ID)
}

// Mutation returns the ReplyMutation object of the builder.
func (ru *ReplyUpdate) Mutation() *ReplyMutation {
	return ru.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (ru *ReplyUpdate) ClearComment() *ReplyUpdate {
	ru.mutation.ClearComment()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReplyUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReplyUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReplyUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReplyUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReplyUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := reply.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReplyUpdate) check() error {
	if v, ok := ru.mutation.AdminId(); ok {
		if err := reply.AdminIdValidator(v); err != nil {
			return &ValidationError{Name: "adminId", err: fmt.Errorf(`ent: validator failed for field "Reply.adminId": %w`, err)}
		}
	}
	if _, ok := ru.mutation.CommentID(); ru.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reply.comment"`)
	}
	return nil
}

func (ru *ReplyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reply.Table, reply.Columns, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reply.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Reply(); ok {
		_spec.SetField(reply.FieldReply, field.TypeString, value)
	}
	if value, ok := ru.mutation.AdminId(); ok {
		_spec.SetField(reply.FieldAdminId, field.TypeString, value)
	}
	if value, ok := ru.mutation.AdminName(); ok {
		_spec.SetField(reply.FieldAdminName, field.TypeString, value)
	}
	if value, ok := ru.mutation.CreateTime(); ok {
		_spec.SetField(reply.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(reply.FieldUpdateTime, field.TypeTime, value)
	}
	if ru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReplyUpdateOne is the builder for updating a single Reply entity.
type ReplyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReplyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReplyUpdateOne) SetUpdatedAt(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetCommentID sets the "comment_id" field.
func (ruo *ReplyUpdateOne) SetCommentID(u uint64) *ReplyUpdateOne {
	ruo.mutation.SetCommentID(u)
	return ruo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableCommentID(u *uint64) *ReplyUpdateOne {
	if u != nil {
		ruo.SetCommentID(*u)
	}
	return ruo
}

// SetReply sets the "reply" field.
func (ruo *ReplyUpdateOne) SetReply(s string) *ReplyUpdateOne {
	ruo.mutation.SetReply(s)
	return ruo
}

// SetNillableReply sets the "reply" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableReply(s *string) *ReplyUpdateOne {
	if s != nil {
		ruo.SetReply(*s)
	}
	return ruo
}

// SetAdminId sets the "adminId" field.
func (ruo *ReplyUpdateOne) SetAdminId(s string) *ReplyUpdateOne {
	ruo.mutation.SetAdminId(s)
	return ruo
}

// SetNillableAdminId sets the "adminId" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableAdminId(s *string) *ReplyUpdateOne {
	if s != nil {
		ruo.SetAdminId(*s)
	}
	return ruo
}

// SetAdminName sets the "adminName" field.
func (ruo *ReplyUpdateOne) SetAdminName(s string) *ReplyUpdateOne {
	ruo.mutation.SetAdminName(s)
	return ruo
}

// SetNillableAdminName sets the "adminName" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableAdminName(s *string) *ReplyUpdateOne {
	if s != nil {
		ruo.SetAdminName(*s)
	}
	return ruo
}

// SetCreateTime sets the "create_time" field.
func (ruo *ReplyUpdateOne) SetCreateTime(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetCreateTime(t)
	return ruo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableCreateTime(t *time.Time) *ReplyUpdateOne {
	if t != nil {
		ruo.SetCreateTime(*t)
	}
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *ReplyUpdateOne) SetUpdateTime(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableUpdateTime(t *time.Time) *ReplyUpdateOne {
	if t != nil {
		ruo.SetUpdateTime(*t)
	}
	return ruo
}

// SetComment sets the "comment" edge to the Comment entity.
func (ruo *ReplyUpdateOne) SetComment(c *Comment) *ReplyUpdateOne {
	return ruo.SetCommentID(c.ID)
}

// Mutation returns the ReplyMutation object of the builder.
func (ruo *ReplyUpdateOne) Mutation() *ReplyMutation {
	return ruo.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (ruo *ReplyUpdateOne) ClearComment() *ReplyUpdateOne {
	ruo.mutation.ClearComment()
	return ruo
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ruo *ReplyUpdateOne) Where(ps ...predicate.Reply) *ReplyUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReplyUpdateOne) Select(field string, fields ...string) *ReplyUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reply entity.
func (ruo *ReplyUpdateOne) Save(ctx context.Context) (*Reply, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReplyUpdateOne) SaveX(ctx context.Context) *Reply {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReplyUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReplyUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReplyUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := reply.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReplyUpdateOne) check() error {
	if v, ok := ruo.mutation.AdminId(); ok {
		if err := reply.AdminIdValidator(v); err != nil {
			return &ValidationError{Name: "adminId", err: fmt.Errorf(`ent: validator failed for field "Reply.adminId": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.CommentID(); ruo.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reply.comment"`)
	}
	return nil
}

func (ruo *ReplyUpdateOne) sqlSave(ctx context.Context) (_node *Reply, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reply.Table, reply.Columns, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reply.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reply.FieldID)
		for _, f := range fields {
			if !reply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reply.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Reply(); ok {
		_spec.SetField(reply.FieldReply, field.TypeString, value)
	}
	if value, ok := ruo.mutation.AdminId(); ok {
		_spec.SetField(reply.FieldAdminId, field.TypeString, value)
	}
	if value, ok := ruo.mutation.AdminName(); ok {
		_spec.SetField(reply.FieldAdminName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CreateTime(); ok {
		_spec.SetField(reply.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(reply.FieldUpdateTime, field.TypeTime, value)
	}
	if ruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reply{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
