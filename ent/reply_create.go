// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iot-synergy/synergy-member-rpc/ent/comment"
	"github.com/iot-synergy/synergy-member-rpc/ent/reply"
)

// ReplyCreate is the builder for creating a Reply entity.
type ReplyCreate struct {
	config
	mutation *ReplyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReplyCreate) SetCreatedAt(t time.Time) *ReplyCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableCreatedAt(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReplyCreate) SetUpdatedAt(t time.Time) *ReplyCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableUpdatedAt(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetCommentID sets the "comment_id" field.
func (rc *ReplyCreate) SetCommentID(u uint64) *ReplyCreate {
	rc.mutation.SetCommentID(u)
	return rc
}

// SetReply sets the "reply" field.
func (rc *ReplyCreate) SetReply(s string) *ReplyCreate {
	rc.mutation.SetReply(s)
	return rc
}

// SetAdminId sets the "adminId" field.
func (rc *ReplyCreate) SetAdminId(s string) *ReplyCreate {
	rc.mutation.SetAdminId(s)
	return rc
}

// SetAdminName sets the "adminName" field.
func (rc *ReplyCreate) SetAdminName(s string) *ReplyCreate {
	rc.mutation.SetAdminName(s)
	return rc
}

// SetCreateTime sets the "create_time" field.
func (rc *ReplyCreate) SetCreateTime(t time.Time) *ReplyCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableCreateTime(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the "update_time" field.
func (rc *ReplyCreate) SetUpdateTime(t time.Time) *ReplyCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableUpdateTime(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ReplyCreate) SetID(u uint64) *ReplyCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetComment sets the "comment" edge to the Comment entity.
func (rc *ReplyCreate) SetComment(c *Comment) *ReplyCreate {
	return rc.SetCommentID(c.ID)
}

// Mutation returns the ReplyMutation object of the builder.
func (rc *ReplyCreate) Mutation() *ReplyMutation {
	return rc.mutation
}

// Save creates the Reply in the database.
func (rc *ReplyCreate) Save(ctx context.Context) (*Reply, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReplyCreate) SaveX(ctx context.Context) *Reply {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReplyCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReplyCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReplyCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := reply.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := reply.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := reply.DefaultCreateTime
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := reply.DefaultUpdateTime
		rc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReplyCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reply.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reply.updated_at"`)}
	}
	if _, ok := rc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment_id", err: errors.New(`ent: missing required field "Reply.comment_id"`)}
	}
	if _, ok := rc.mutation.Reply(); !ok {
		return &ValidationError{Name: "reply", err: errors.New(`ent: missing required field "Reply.reply"`)}
	}
	if _, ok := rc.mutation.AdminId(); !ok {
		return &ValidationError{Name: "adminId", err: errors.New(`ent: missing required field "Reply.adminId"`)}
	}
	if v, ok := rc.mutation.AdminId(); ok {
		if err := reply.AdminIdValidator(v); err != nil {
			return &ValidationError{Name: "adminId", err: fmt.Errorf(`ent: validator failed for field "Reply.adminId": %w`, err)}
		}
	}
	if _, ok := rc.mutation.AdminName(); !ok {
		return &ValidationError{Name: "adminName", err: errors.New(`ent: missing required field "Reply.adminName"`)}
	}
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Reply.create_time"`)}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Reply.update_time"`)}
	}
	if _, ok := rc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required edge "Reply.comment"`)}
	}
	return nil
}

func (rc *ReplyCreate) sqlSave(ctx context.Context) (*Reply, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReplyCreate) createSpec() (*Reply, *sqlgraph.CreateSpec) {
	var (
		_node = &Reply{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reply.Table, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeUint64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reply.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reply.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Reply(); ok {
		_spec.SetField(reply.FieldReply, field.TypeString, value)
		_node.Reply = value
	}
	if value, ok := rc.mutation.AdminId(); ok {
		_spec.SetField(reply.FieldAdminId, field.TypeString, value)
		_node.AdminId = value
	}
	if value, ok := rc.mutation.AdminName(); ok {
		_spec.SetField(reply.FieldAdminName, field.TypeString, value)
		_node.AdminName = value
	}
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.SetField(reply.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.SetField(reply.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := rc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reply.CommentTable,
			Columns: []string{reply.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReplyCreateBulk is the builder for creating many Reply entities in bulk.
type ReplyCreateBulk struct {
	config
	err      error
	builders []*ReplyCreate
}

// Save creates the Reply entities in the database.
func (rcb *ReplyCreateBulk) Save(ctx context.Context) ([]*Reply, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reply, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReplyCreateBulk) SaveX(ctx context.Context) []*Reply {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReplyCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReplyCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
