syntax = "proto3";

// Member message

message MemberInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string username = 5;
  optional string password = 6;
  optional string nickname = 7;
  optional uint64 rank_id = 8;
  optional string mobile = 9;
  optional string email = 10;
  optional string avatar = 11;
  optional string wechat_id = 12;
  optional string rank_code = 13;
  optional int64 expired_at = 14;
  optional string forein_id = 15;
}

message MemberListResp {
  uint64 total = 1;
  repeated MemberInfo data = 2;
}

message MemberListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string username = 3;
  optional string nickname = 4;
  optional string mobile = 5;
  optional string email = 6;
  optional uint64 rank_id = 7;
  optional string wechat_id = 8;
}

message MemberLoginResp {
  string id = 1;
  string nickname = 2;
  string avatar = 3;
  uint64 rank_id = 4;
}


message MemberInfoResp {
  int64 code = 1;
  string msg = 2;
  optional MemberInfoRespData data = 3;
}

message MemberInfoRespData {
  int64 isExist = 1;
  optional MemberInfo memberInfo = 2;
}

message RegisterMemberResp {
  int64 code = 1;
  string msg = 2;
  optional RegisterMemberRespData data = 3;
}

message RegisterMemberRespData {
  string id = 1;
}

message UpdateMember2Resp {
  int64 code = 1;
  string msg = 2;
  bool data = 3;
}

message MemberRegisterReq {
  string username = 1;
  string email = 2;
  string password = 3;
}

message UsernameReq {
  string username = 1;
}

message UpdateMember2Resp {
  int64 code = 1;
  string msg = 2;
  bool data = 3;
}



message SyncResult {
  int64 all = 1;
  int64 new = 2;
  int64 updated = 3;
}

message SyncMemberResp {
  int64 code = 1;
  string msg = 2;
  optional SyncResult data = 3;
}

service Mms {

  // Member management
  // group: member
  rpc createMember (MemberInfo) returns (BaseUUIDResp);
  //  group: member
  rpc registerMember(MemberInfo) returns (RegisterMemberResp);
  // group: member
  rpc updateMember (MemberInfo) returns (BaseResp);
  // group: member
  rpc getMemberList (MemberListReq) returns (MemberListResp);
  // group: member
  rpc deleteMember (UUIDsReq) returns (BaseResp);
  // group: member
  rpc getMemberById (UUIDReq) returns (MemberInfo);
  // group: member
  rpc getMemberByUsername (UsernameReq) returns (MemberInfo);
  //  group: member
  rpc getMember(Empty) returns(MemberInfoResp);
  //  group: member
  rpc updateMember2(MemberInfo) returns (UpdateMember2Resp);
   //  group: member
  rpc syncFirebaseMember(Empty) returns (SyncMemberResp);
}